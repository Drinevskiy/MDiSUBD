-- DROP USER DEV_SCHEMA CASCADE;

ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;  
CREATE USER DEV_SCHEMA IDENTIFIED BY 1234;
GRANT ALL PRIVILEGES TO DEV_SCHEMA;

CREATE TABLE DEV_SCHEMA.EmployeeRole (
    RoleID INT NOT NULL PRIMARY KEY,
    RoleName VARCHAR(55) NOT NULL
);

CREATE TABLE DEV_SCHEMA.EmployeeType (
    EmployeeTypeID INT NOT NULL PRIMARY KEY,
    EmployeeTypeName VARCHAR(55) NOT NULL,
    EmployeeTypeDescription VARCHAR(1000) NOT NULL
);

CREATE TABLE DEV_SCHEMA.HistoryType (
    HistoryTypeID INT NOT NULL PRIMARY KEY,
    HistoryTypeDescription VARCHAR(255) NOT NULL
);

CREATE TABLE DEV_SCHEMA.TaskType (
    TaskTypeID INT NOT NULL PRIMARY KEY,
    TaskTypeDescription VARCHAR(255) NOT NULL
);

CREATE TABLE DEV_SCHEMA.Task (
    TaskID INT NOT NULL PRIMARY KEY,
    TaskTypeID INT NOT NULL,
    TaskName VARCHAR(255) NOT NULL,
    TaskDescription VARCHAR(3000) NOT NULL,
    DateFinish DATE NOT NULL,
    FOREIGN KEY (TaskTypeID) REFERENCES DEV_SCHEMA.TaskType(TaskTypeID)
);

CREATE TABLE DEV_SCHEMA.Investor (
    InvestorID INT NOT NULL PRIMARY KEY,
    InvestorFirstName VARCHAR(255) NOT NULL,
    InvestorSecondName VARCHAR(255) NOT NULL,
    InvestorContactInformation VARCHAR(3000) NOT NULL
);

CREATE TABLE DEV_SCHEMA.Company (
    CompanyID INT NOT NULL PRIMARY KEY,
    CompanyName VARCHAR(255) NOT NULL,
    CompanyDescription VARCHAR(3000) NOT NULL,
    CompanyAddress VARCHAR (1000) NOT NULL,
    CompanyContactInformation VARCHAR (1000) NOT NULL
);

CREATE TABLE DEV_SCHEMA.Investment (
    InvestmentID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    InvestorID INT NOT NULL,
    InvestmentSum INT NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES DEV_SCHEMA.Company(CompanyID),
    FOREIGN KEY (InvestorID) REFERENCES DEV_SCHEMA.Investor(InvestorID)
);

CREATE TABLE DEV_SCHEMA.Department (
    DepartmentID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    DepartmentName VARCHAR(255) NOT NULL,
    DepartmentDescription VARCHAR(3000) NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES DEV_SCHEMA.Company(CompanyID)
);

CREATE TABLE DEV_SCHEMA.Clients (
    ClientID INT NOT NULL PRIMARY KEY,
    ClientName VARCHAR(255) NOT NULL,
    ClientDDName VARCHAR(255) NOT NULL,
    ClientVVVName VARCHAR(255) NOT NULL,
    ClientContactInformation VARCHAR(3000) NOT NULL
);

CREATE TABLE DEV_SCHEMA.OrderClient (
    OrderClientID INT NOT NULL PRIMARY KEY,
    ProjectID INT NOT NULL,
    ClientID INT NOT NULL,
    OrderClientName VARCHAR(255) NOT NULL,
    OrderClientDescription VARCHAR(3000) NOT NULL,
    OrderClientPrice INT NOT NULL,
    OrderClientDate DATE NOT NULL,
    FOREIGN KEY (ClientID) REFERENCES DEV_SCHEMA.Clients(ClientID),
    FOREIGN KEY (ProjectID) REFERENCES DEV_SCHEMA.Project(ProjectID)
);

CREATE TABLE DEV_SCHEMA.Project (
    ProjectID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    ClientID INT NOT NULL,
    ProjectName VARCHAR(255) NOT NULL,
    ProjectDescription VARCHAR(3000) NOT NULL,
    DateStart DATE NOT NULL,
    DateFinish DATE NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES DEV_SCHEMA.Company(CompanyID),
    FOREIGN KEY (ClientID) REFERENCES DEV_SCHEMA.Clients(ClientID)
);


CREATE TABLE DEV_SCHEMA.Employee (
    EmployeeID INT NOT NULL PRIMARY KEY,
    EmployeeTypeID INT NOT NULL,
    EmployeeRoleID INT NOT NULL,
    DepartmentID INT NOT NULL,
    CompanyID INT NOT NULL,
    EmployeeFirstName VARCHAR(255) NOT NULL,
    EmployeeSecondName VARCHAR(255) NOT NULL,
    EmployeeSalary INT NOT NULL,
    EmployeeContactInformation VARCHAR(3000) NOT NULL,
    Login VARCHAR(255) NOT NULL,
    Pass VARCHAR(255) NOT NULL,
    FOREIGN KEY (EmployeeTypeID) REFERENCES DEV_SCHEMA.EmployeeType(EmployeeTypeID),
    FOREIGN KEY (EmployeeRoleID) REFERENCES DEV_SCHEMA.EmployeeRole(RoleID),
    FOREIGN KEY (CompanyID) REFERENCES DEV_SCHEMA.Company(CompanyID),
    FOREIGN KEY (DepartmentID) REFERENCES DEV_SCHEMA.Department(DepartmentID)
);

CREATE TABLE DEV_SCHEMA.EmployeeTask (
    EmployeeID INT NOT NULL,
    TaskID INT NOT NULL,
    FOREIGN KEY (EmployeeID) REFERENCES DEV_SCHEMA.Employee(EmployeeID),
    FOREIGN KEY (TaskID) REFERENCES DEV_SCHEMA.Task(TaskID),
    PRIMARY KEY (EmployeeID, TaskID)
);

CREATE TABLE DEV_SCHEMA.EmployeeTaskHistory (
    HistoryID INT NOT NULL PRIMARY KEY,
    EmployeeID INT NOT NULL,
    TaskID INT NOT NULL,
    HistoryTypeID INT NOT NULL,
    FOREIGN KEY (TaskID) REFERENCES DEV_SCHEMA.Task(TaskID),
    FOREIGN KEY (EmployeeID) REFERENCES DEV_SCHEMA.Employee(EmployeeID),
    FOREIGN KEY (HistoryTypeID) REFERENCES DEV_SCHEMA.HistoryType(HistoryTypeID)
);

CREATE TABLE DEV_SCHEMA.MyTable
(
    Id NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Val NUMBER(10),
    CONSTRAINT id_pk PRIMARY KEY (Id),
    CONSTRAINT uq_val UNIQUE (Val),                                   
    CONSTRAINT chk_val CHECK (Val > 0),
    CONSTRAINT chk_val2 CHECK (Val > 10) 
)
/
CREATE OR REPLACE PROCEDURE DEV_SCHEMA.updateMyTable(mod_id IN NUMBER, new_val IN NUMBER) IS
BEGIN
    UPDATE DEV_SCHEMA.MyTable SET Val = new_val WHERE Id = mod_id;
END;
/
DROP PROCEDURE DEV_SCHEMA.updateMyTable
/
CREATE OR REPLACE PROCEDURE DEV_SCHEMA.deleteMyTable(del_id IN NUMBER) IS
BEGIN
    DELETE FROM DEV_SCHEMA.MyTable WHERE Id=del_id;
END;
/
DROP PROCEDURE DEV_SCHEMA.deleteMyTable
/
DROP FUNCTION DEV_SCHEMA.getReward1;
CREATE OR REPLACE FUNCTION DEV_SCHEMA.getReward1(salary IN NUMBER, percent in number) RETURN DOUBLE PRECISION
IS
    ret DOUBLE PRECISION;
BEGIN
    IF (salary < 0) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary cannot be negative.');
    END IF;
    
    IF (percent < 0) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Percent cannot be negative.');
    END IF;
    
    ret := ( 1 + percent ) * 12 * salary;
    
    RETURN ret;
END;
/
CREATE UNIQUE INDEX DEV_SCHEMA.indx_client_name ON DEV_SCHEMA.Clients(ClientName);

CREATE UNIQUE INDEX DEV_SCHEMA.indx_company_name ON DEV_SCHEMA.Company(lower(CompanyName));


CREATE TABLE DEV_SCHEMA.tst_c1(
    id NUMBER PRIMARY KEY, 
    id1 NUMBER
    -- FOREIGN KEY (id1) REFERENCES DEV_SCHEMA.tst_c2(id)

)
/
CREATE TABLE DEV_SCHEMA.tst_c2(
    id NUMBER PRIMARY KEY, 
    id2 NUMBER, 
    FOREIGN KEY (id2) REFERENCES DEV_SCHEMA.tst_c1(id)
)
/
DROP TABLE DEV_SCHEMA.tst_c2;
DROP TABLE DEV_SCHEMA.tst_c1;
ALTER TABLE DEV_SCHEMA.tst_c1 ADD CONSTRAINT fk_c2_id FOREIGN KEY (id1) REFERENCES DEV_SCHEMA.tst_c2(id);
alter table DEV_SCHEMA.tst_c1 drop CONSTRAINT fk_c2_id;



-- Additional task
CREATE OR REPLACE PROCEDURE DEV_SCHEMA.i_dont_pass(del_id IN NUMBER) IS
BEGIN
    DELETE FROM DEV_SCHEMA.MyTable WHERE id=del_id;
END;

CREATE TABLE DEV_SCHEMA.NewTable (
    NewID INT NOT NULL PRIMARY KEY,
    NewValue VARCHAR(255) NOT NULL
)
/

-- Создание индекса на столбце NewValue
CREATE INDEX DEV_SCHEMA.indx_new_value ON DEV_SCHEMA.NewTable(NewValue)
/

-- Пакет для схемы DEV_SCHEMA
CREATE OR REPLACE PACKAGE DEV_SCHEMA.ClientManagement AS
    PROCEDURE AddClient(
        p_ClientName IN VARCHAR2,
        p_ContactInfo IN VARCHAR2
    );

    FUNCTION GetClientContactInfo(
        p_ClientID IN INT
    ) RETURN VARCHAR2;
END ClientManagement;
/



CREATE TABLE DEV_SCHEMA.GROUPS (
    ID NUMBER PRIMARY KEY,            
    NAME VARCHAR2(100) NOT NULL,      
    C_VAL NUMBER DEFAULT 0            
);

CREATE TABLE DEV_SCHEMA.STUDENTS (
    ID NUMBER PRIMARY KEY,              
    NAME VARCHAR2(100) NOT NULL,        
    GROUP_ID NUMBER,                    
    FOREIGN KEY (GROUP_ID) REFERENCES DEV_SCHEMA.GROUPS(ID)
);